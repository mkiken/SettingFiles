REPO="${HOME}/Desktop/repository/"
SET="${HOME}/Desktop/repository/SettingFiles/"

#expanded command
case "${OSTYPE}" in
# --------------- Mac(Unix) ---------------
darwin*)
# ここに設定
alias ls='ls -G'
alias la='ls -A'
alias ll='ls -AFThl'
#MacVim on CUI
alias vi='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/mvim --remote-tab-silent'
alias vs='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/mvim'
alias vimdiff='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/mvimdiff'

function em(){
	open -a /Applications/Emacs.app "$@"
}

function es(){
    /Applications/Emacs.app/Contents/MacOS/Emacs "$@" &
}

function ec(){
    /Applications/Emacs.app/Contents/MacOS/bin/emacsclient -n "$@" --alternate-editor /Applications/Emacs.app/Contents/MacOS/Emacs &
}

alias st='subl'
alias at='atom'

alias kr4mbsave='/Applications/KeyRemap4MacBook.app/Contents/Applications/KeyRemap4MacBook_cli.app/Contents/MacOS/KeyRemap4MacBook_cli export > ${SET}mac/kr4mb-import.sh'

# 現在のディレクトリ以下の当てはまるファイルを全て削除する
# http://www.omnioo.com/omnioolab/2012/07/find.php
alias rrm='noglob _rrm'
function _rrm(){
    find . -name "$1"
    echo "remove all above? [y/N]"
    read ANSWER

    case $ANSWER in
        "Y" | "y" | "yes" | "Yes" | "YES" )
            find . -name "$1" -exec rmtrash {} \;;
            echo "$1 removed recursively.";;
        * ) echo "rrm canceled.";;
    esac
}

alias rrmi='noglob _rrmi'
function _rrmi(){
    find . -name "$1"
    find . -name "$1" -exec rm -i {} \;
    echo "rrmi $1 executed."
}

alias rfind='noglob _rfind'
# 現在のディレクトリ以下から引数の文字列を含むファイル名を列挙
function _rfind(){
    find . -name "*${1}*"
}
alias rfindi='noglob _rfindi'
#case-insensitive version
function _rfindi(){
    find . -iname "*${1}*"
}

# 現在のディレクトリ以下から引数の文字列を列挙

alias rgrep='noglob _rgrep'
function _rgrep(){
    grep -nr "${1}" *
}
alias rgrepi='noglob _rgrepi'
#case-insensitive version
function _rgrepi(){
    grep -nri "${1}" *
}

# Haskellのファイルをa.outでコンパイルする
# その際、オブジェクトファイル(.o)とインターフェースファイル(.hi)を削除
function ghca(){
    ghc $1 -o a.out
        ret=$?
        if test ${ret} -eq 0
            then
                fname=`echo $1 | sed -e "s/\.[^.]*$//"`
                rm ${fname}.hi
                rm ${fname}.o
# echo "rm ${fname}.hi & ${fname}.o"
                fi
}

function mls() {
  # -h, --helpしたら呼ぶ
  help() {
    echo 'rmf help!'
    echo 'Usage: rmf [option] filename'
    return
  }
  # 引数に対してループを回す
  for file in $*
  do
    # 引数一つ一つについてcase文で条件分岐
    case $file in
      # -hか--helpだった時はhelp()を呼んで終わり
      -h|--help)
        help
        return
        ;;
      -a)
        option="-a"
        ;;
      -l)
        option="-l"
        ;;
      # ワイルドカード
      # オプションではない時のメインとなる処理
      *)
        echo 'removed:' $file
        /bin/ls $option $file
    esac
    # shiftで配列の先頭を削除出来る
    # shift
  done
  return 1;  # 必要かどうかはわからない
}

# rmfで削除
function rmf() {
  # -h, --helpしたら呼ぶ
  help() {
    echo 'rmf help!'
    echo 'Usage: rmf [option] filename'
    return
  }
  # 引数に対してループを回す
  for file in $*
  do
    # 引数一つ一つについてcase文で条件分岐
    case $file in
      # -hか--helpだった時はhelp()を呼んで終わり
      -h|--help)
        help
        return
        ;;
      # -rfか-frだった時は$optionに"-rf"を入れておく
      -rf|-fr)
        option="-rf"
        ;;
      -l)
        option="-l"
        ;;
      -a)
        option="-a"
        ;;
      # ワイルドカード
      # オプションではない時のメインとなる処理
      *)
        ;;
    esac
    # shiftで配列の先頭を削除出来る
    # shift
  done
  echo "$option"
  /bin/ls $option
  return 0;  # 必要かどうかはわからない
}

# _rmfcmd() {
  # # 補完のための便利な関数_arguments
  # _arguments \
    # # -h, --helpを入力した時にはファイル一覧の候補を表示しない
    # # 複数のオプションは{foo,bar}と書く
    # # '[description]'でオプションの説明
    # '(- *)'{-h,--help}'[show help]' \
    # -r'[recursive]' \
    # -f'[force]' \
    # -rf'[recursive && force]' \
    # # ファイル一覧を出す
    # '*: :_files'
# }

# # 補完関数_rmfcmdを自作関数rmfにあてる
# compdef _rmfcmd rmf

# http://tukaikta.blog135.fc2.com/blog-entry-214.html
alias rm='rmtrash'

# 事故死予防
alias cp='cp -i'
alias mv='mv -i'

alias pv='popd'
alias up='cd ../'

alias ng='noglob'

;;

# --------------- Linux ---------------
linux*)
# ここに設定
alias ls='ls --color=auto'
function vi(){
	gvim -f --remote-tab-silent $@ &
}
# function vi(){
# gvim -f --remote-tab $1 &
# }
function es(){
	emacs $@ &
}
function ec(){
	emacsclient $@ --alternate-editor emacs &
}
;;
esac

# --------------- 共通設定 ---------------

#make new alias
#alias refresh='source ~/.bashrc'
alias refresh='source ~/.zshrc'

alias pyserv='python -m SimpleHTTPServer'

alias l='ls'
alias le='less'

#cd
alias cdp='cd ~/Program/ProCon'
alias cdd='cd ~/Desktop'
alias cdr='cd ${REPO}'
alias cds='cd ${SET}'
alias cdphp='cd /Library/WebServer/Documents/'

#shortcut for setting files
alias bashrc='vi ~/.bashrc'
alias zshrc='vi ~/.zshrc'
alias aliases='vi ~/.aliases'
alias einit='vi ~/.emacs.d/init.el'
# alias vimrc='vi ~/.vimrc'
alias vimrc='em ~/.vimrc'
alias gvimrc='em ~/.gvimrc'
alias gitconfig='vi ~/.gitconfig'
alias zshenv='vi ~/.zshenv'
alias jshintrc='vi ~/.jshintrc'
alias jsbeautifyrc='vi ~/.jsbeautifyrc'
alias editorconfig='vi ~/.editorconfig'

#shortc cut for git
alias g='noglob git'
alias gs='git s'
alias ga='git add'
alias gaa='git add .'
# alias gra='git rmall'
alias gcm='git commit'
alias gci='git commit'
alias gps='git push'
alias gpl='git pull'
alias gdf='git diff'
alias gmd='git modified'
alias gpdr='git pull-dry-run'
alias gcb='git current-branch'
alias grb='git rb'
alias gwdf='git wdf'
alias gtr='git tree'
alias gl='git log'
alias ggr='git gr'
alias glg='git lg'
alias ghb='git hisback'
alias gb='git branch'
alias gft='git fetch'
alias gvdf='git vdf'
alias gvmd='git vmodified'
alias gco='git co'
alias gst='git st'

#shortcut for Application
alias e='./a.out'
alias cot='open -a CotEditor'
alias aq='aquamacs'
alias ccp='noglob ccp'

#rlwrap
alias ocaml='rlwrap ocaml'


#display all files,End with true or false
alias allfile='defaults write com.apple.finder AppleShowAllFiles'



# util
alias sz='du -ch -d 1'


