; http://transitive.info/article/git/command/config/

; [user]
  ; name = mkiken
  ; email = mkiken0@gmail.com
[push]
  default = current

[pull]
  default = current
  prune = true
  ff = only

; https://blogs.atlassian.com/2013/06/git-diff/
[alias]
  ad = add
  co = checkout
  br = -c color.branch=always branch
  ci = commit
  s = -c color.status=always status -bs
  ft = fetch
  ps = push
  pl = pull
  df = -c color.diff=always diff
  sm = submodule
  # http://qiita.com/hash/items/1f01aa09ccf148542f21
  lg = log --stat --pretty=format:'%Cblue%h %Cgreen%ar %Cred%an %Creset%s %Cred%d'
  gr = log --graph --date-order --pretty=format:'%Cblue%h %Cgreen%ci %Cred%an %Cblue%m %Creset%s %Cred%d'
  rb = rebase
  st = stash
  bl = blame
  ; cl = clone
  cl = clean -d
  cp = cherry-pick
  rl = reflog
  rv = revert
  mt = mergetool
  dt = difftool
  add-cancel = reset HEAD
  bs = bisect
  sw = switch
  # https://stackoverflow.com/questions/8475448/find-merge-commit-which-includes-a-specific-commit
  find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
  show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"

  ; http://qiita.com/peccul/items/90dd469e2f72babbc106
  today = log --oneline --since='12 hour ago'
  hisback = reset --soft HEAD^
  back = reset --hard HEAD^
  zip = archive --format=zip --prefix=archive/ HEAD^ -o archive.zip
  ; http://qiita.com/usamik26/items/bfc2196f510d68b3c2cc
  modified = diff --diff-filter=M
  added = diff --diff-filter=A
  deleted = diff --diff-filter=D
  ; http://qiita.com/sonots/items/fbbcfdba6d7d016fbadb
  current-branch = rev-parse --abbrev-ref HEAD
  pull-dry-run  = !"git fetch origin; B=$(git rev-parse --abbrev-ref HEAD); git diff --stat --summary ${B}..origin/${B}"
; http://qiita.com/shim0mura/items/4363769faf25ce485b89
  rma  = rm `git ls-files --deleted`
; http://lynn1985.blog.shinobi.jp/%E5%8B%89%E5%BC%B7%E3%83%A1%E3%83%A2/git%20%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A4%89%E6%9B%B4%E5%B1%A5%E6%AD%B4%E3%82%92%E8%A6%8B%E3%82%8B
  flog  = log -p
  ; http://qiita.com/yuyuchu3333/items/a30387bdd6a0afc1185c
  rso  = remote show origin
  smpull = submodule foreach 'git pull origin master'
  smupdate = submodule update --init --recursive

  ; http://d.hatena.ne.jp/sugyan/20111103/1320247493
  tr = log --graph --pretty='format:%C(yellow)%h%Creset %s %Cgreen(%an)%Creset %Cred%d%Creset'
; http://xr0038tech.hatenadiary.jp/entry/2014/01/23/202116
  ; tree = log --graph --branches --pretty=format:"%d [%h] \"%s\""
  tree = log --graph --decorate --oneline --abbrev-commit

  d0 = diff HEAD             # HEADとdiff
  d1 = diff HEAD~            # HEADから1つ前とdiff
  d2 = diff HEAD~~           # HEADから2つ前とdiff
  d3 = diff HEAD~~~          # HEADから3つ前とdiff
  d4 = diff HEAD~~~~         # HEADから4つ前とdiff
  d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
  d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff

  rollback = reset --hard

  sdf = diff —name-status

  r0 = checkout HEAD
  r1 = checkout HEAD~
  r2 = checkout HEAD~~
  r3 = checkout HEAD~~~
  r4 = checkout HEAD~~~~
  r5 = checkout HEAD~~~~~
  r10 = checkout HEAD~~~~~~~~~~

  wdf = diff --word-diff=color
  upsync = "!f_upsync () { git fetch upstream; git rebase upstream/master;};f_upsync"

  vdf= difftool --tool=vimdiff --no-prompt --dir-diff
  vmodified = difftool --tool=vimdiff --no-prompt --dir-diff --diff-filter=M

  remoterm = push --delete origin
  conflicts = !git ls-files -u | cut -f 2 | sort -u

  merged-branches = branch --merged
  merged-remote-branches = !git branch -a --merged | grep -v \\* | grep -v master | grep remotes/origin/ | sed -e 's%remotes/origin/%%g'

  name = config user.name
  email = config user.email

  ; http://qiita.com/usamik26/items/7bfa61b31344206077fb
  shallow-clone = clone --depth 1

  ; http://qiita.com/kaneshin/items/9b22088f24d060ab034c
  alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort

  repository = rev-parse --show-toplevel

  # 最新のcommitと現在の状態の差分を表示する
  diff-latest = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # 特定のcommitを含むブランチの検索(find branch)
  find-branch-by-commit = "!f() { git branch -a --contains $1; }; f"

  # ソースコードでlogを検索(find by code)
  find-log-by-code = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # commit messageでlogを検索(find by message)
  find-log-by-message = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # masterにmerge済みのブランチ削除(delete merged)
  delete-merged-branches = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

[color]
  ui = auto
[core]
  pager = delta
  autocrlf = false
  ; editor = mvim
  # editor = vim --noplugin
  editor = nvim
  quotepath = false
  ignorecase = false
  excludesfile = ~/.gitignore
  ; http://qiita.com/yaotti/items/2361768b6ed781e87780
[interactive]
# git add/checkout -p時に，エンターでの決定を省略する
  singlekey = true
  diffFilter = delta --color-only
  ; diffFilter = diff-highlight
[delta]
  features = unobtrusive-line-numbers decorations
  line-numbers = true
  side-by-side = true
  navigate = true    # use n and N to move between diff sections
  diff-so-fancy = true
  whitespace-error-style = 22 reverse
  paging = always
[delta "unobtrusive-line-numbers"]
  line-numbers = true
  line-numbers-left-format = "{nm:>4}┊"
  line-numbers-right-format = "{np:>4}┊"
  line-numbers-left-style = blue
  line-numbers-right-style = blue
[delta "decorations"]
  # https://github.com/dandavison/delta/blob/main/themes.gitconfig
  commit-decoration-style = box bold orange ul
  file-style = bold purple ul
  file-decoration-style = underline box blue
  hunk-header-style = line-number syntax
  line-numbers-plus-style = green
  line-numbers-minus-style = red
[diff]
  colorMoved = default
  tool = nvim
    ; http://qiita.com/takaakikasai/items/3d4f8a4867364a46dfa3
  algorithm = histogram
  compactionHeuristic = true
[difftool "nvim"]
  cmd = nvim -f -d \"$LOCAL\" \"$REMOTE\"

[merge]
  tool = nvim
[mergetool]
  keepBackup = false
; [mergetool "mvimdiff"]
  ; cmd = mvim -f -d \"$LOCAL\" \"$MERGED\" \"$REMOTE\"
; [mergetool "atom"]
  ; cmd = atom_merge $MERGED
[mergetool "nvim"]
  # 2-way
  cmd = nvim -c '2wincmd w | diffthis | 3wincmd w | diffthis | 1wincmd w | wincmd J' -O $MERGED $LOCAL $REMOTE

  # 3-way
  # cmd = nvim -f -d -c 'wincmd J' \"$MERGED\" \"$LOCAL\" \"$BASE\" \"$REMOTE\"
; [mergetool "vim"]
  # 2-way
  ; cmd = vim -f -d -c 'wincmd J' \"$MERGED\" \"$LOCAL\" \"$REMOTE\"
  # 3-way
  # cmd = vim -f -d -c 'wincmd J' \"$MERGED\" \"$LOCAL\" \"$BASE\" \"$REMOTE\"
[i18n]
  commitencoding = utf-8
[user]
  name =
  email =

[fetch]
  prune = true

; http://qiita.com/yuku_t/items/04853c9aecb40edadbb2
[init]
  templatedir = ~/.git_template
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[lfs]
  concurrenttransfers = 100

; http://d.hatena.ne.jp/z3100/20120505/1336203155
[include]
  path = .os.gitconfig
[rerere]
  enabled = true
[commit]
	verbose = true
