#!/bin/zsh
FILTER_TOOL='fzf-tmux'

if ! command -v ${FILTER_TOOL} > /dev/null 2>&1; then
  exit
fi

FILTER_COMMAND="${FILTER_TOOL} --cycle --exit-0 --ansi"
function filter(){
  ${=FILTER_COMMAND} $@
}

if [ -z "$FILTER_COMMAND" ]; then
  echo "FILTER_COMMAND variable is empty;"
  return;
fi

alias -g F='| filter'

# https://mogulla3.tech/articles/2021-09-06-search-command-history-with-incremental-search/
function select-history() {
  BUFFER=$(history -n -r 1 | awk '!seen[$0]++' | fzf --exact --reverse --no-sort --query="$LBUFFER" --cycle --prompt="History > ")
  CURSOR=${#BUFFER}
  # zle accept-line # 選択した履歴を即座に実行
}

function filter-bindkey() {
  zle -N select-history
  bindkey '^R' select-history
}


alias fgmg='filter_git_command git merge'
alias fgmgs='fgmg --squash'
alias fgpl='filter_git_command_fmt git pull origin'
alias fgps='filter_git_command_fmt git push origin'
alias fgbd='filter_git_command_fmt git branch -d'
alias fgbD='filter_git_command_fmt git branch -D'
alias fgb='br_org'
alias fgbd_remote='filter_git_command_fmt git push --delete origin'
alias fgrb='filter_git_command_fmt git pull --rebase origin'
alias fgl='filter_git_command git log'
alias fgln='fgl --name-status'
alias fglp='fgl -p'
alias fgd='filter_git_command git diff'
alias fgdn='fgd --name-status'
alias fgls='fgl --stat'

alias fls='ls -aR | filter --preview "bat --color=always --style=header,grid {}"'
alias ffind='finda | filter --preview "bat --color=always --style=header,grid {}"'
alias fps='ps aux | filter'
alias fkill='ps ax | filter | awk "{ print $1 }" | xargs kill'
alias fopen='filter_find_command open'
alias fless='filter_find_command less'
alias fnv='filter_find_command nvim'
alias fgcf='gcf | filter'
alias fgmt='gmt $(fgcf)'
alias fga='ga $(fgcf)'
alias fgcoo='gcoo $(fgcf)'
alias fgcot='gcot $(fgcf)'
# http://qiita.com/itkrt2y/items/0671d1f48e66f21241e2
# alias fghq='save_history cd $(ghq root)/$(ghq list | filter)'

function _fgbh(){
  git --no-pager reflog | awk '$3 == "checkout:" && /moving from/ {print $8}' | awk '!seen[$0]++' | grep -Fx -f <(git branch --format='%(refname:short)') | head -30 | filter --preview "echo {} | sed -e 's/\*//' | awk '{print \$1}' | xargs git log --color --graph --decorate --abbrev-commit --format=format:'%C(blue)%h%C(reset) - %C(green)(%ar)%C(reset)%C(yellow)%d%C(reset)\n  %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'"
}

# 直近移動したブランチ一覧からgit switchする
function fgbh(){
  local temp=`_fgbh | xargs echo`
  if [[ -n $temp ]]
  then
    save_history git switch $temp
  else
    return 1
  fi
}

function fcat(){
  cat -n $@ | filter
}

# git switch by branch filter
function fgsw(){
  local temp=`br_fmt | xargs echo`
  if [[ -n $temp ]]
  then
    save_history git sw "$@" "$temp"
  fi
}

# git switch -c by branch filter
function fgswc(){
  local temp=`br_org | xargs echo`
  if [[ -n $temp ]]
  then
    save_history gswc "$@" "$temp"
  fi
}

# Gitのブランチをfilter toolで扱えるように整形(remote文字列を削る)
function br_fmt(){
  br_org | sed -e 's/remotes\/origin\///'
}

# Gitのブランチをfilter toolで扱えるように整形
function br_org(){
  # 取り込まれたコミットのタイムスタンプを降順（-）でソート
  # ログをいい感じに表示 https://zenn.dev/yamo/articles/5c90852c9c64ab
  git branch -a --sort=-committerdate --color \
    | filter --preview "echo {} | sed -e 's/\*//' | awk '{print \$1}' | xargs git log --color --graph --decorate --abbrev-commit --format=format:'%C(blue)%h%C(reset) - %C(green)(%ar)%C(reset)%C(yellow)%d%C(reset)\n  %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'" \
    | xargs echo | sed -e 's/\*//' | awk '{print $1}'
}

# br_fmtのリモート対象版
function br_fmt_remote(){
  br_fmt | xargs echo | awk '{printf("%s%s\n", "remotes/origin/", $0)}'
}

# コマンドを履歴に残す
function save_history(){
  "$@" # 受け取った引数をそのままコマンドとして実行
  local ret=$? # コマンドの終了ステータスをキャプチャ
  if [[ $ret -ne 0 ]]; then
    return $ret # 元の終了ステータスを返す
  fi
  # 実行したコマンドを履歴に追加
  # -- は、以降の引数がオプションとして解釈されるのを防ぐ
  # (q-): Escaping of special characters, minimal quoting with single quotes
  print -s -- ${(q-)@}
}

# findの結果をfilter toolで絞ってコマンドを実行する
function filter_find_command(){
  local cmd="$(ffind)"
  save_history "$@" $cmd
}

# ブランチをfilter toolで絞ってgitコマンドを実行する
function filter_git_command(){
  local branch=$(br_org)
  save_history "$@" "$branch"
}

function filter_git_command_fmt(){
  local branch=$(br_fmt)
  save_history "$@" "$branch"
}

# 指定したリファレンス（ブランチやハッシュ）からファイル/ディレクトリをfilterで選択
# $1: 比較元（ブランチ名やハッシュ）
# $2: 比較先（現在のブランチ名など）
function filter_git_file_or_dir() {
  local ref="$1"
  local compare_ref="$2"
  {
    git ls-tree -r --name-only "$ref"
    git ls-tree -r --name-only "$ref" | grep -o '^.*/' | sort -u
  } | sort -u | filter --prompt="file/dir: " --header="ファイルまたはディレクトリを選択" \
    --preview="git diff --color=always $ref..$compare_ref -- {}"
}

# filter git diff for file
function fgd-branch-file(){
  # ブランチ選択
  local branch=$(FZF_DEFAULT_OPTS="--prompt='branch: ' --header='比較ブランチを選択'" br_fmt)
  if [[ -z $branch ]]; then
    echo "ブランチが選択されていません"
    return 1
  fi

  # ファイル＋ディレクトリ一覧を直接パイプでfilterに渡す
  local target=$(filter_git_file_or_dir "$branch" "$(git rev-parse --abbrev-ref HEAD)")
  if [[ -z $target ]]; then
    echo "ファイルまたはディレクトリが選択されていません"
    return 1
  fi

  # diff実行
  save_history git diff "$branch" -- "$target"
}

# コミットハッシュを指定して、ファイルやディレクトリをfilterで選んでdiffを表示
function fgd-hash-file() {
  local hash="$1"
  if [[ -z $hash ]]; then
    echo "コミットハッシュを引数で指定してください 例: fgd-hash-file <commit-hash>"
    return 1
  fi

  # ファイル＋ディレクトリ一覧をfilterで選択
  local target=$(filter_git_file_or_dir "$hash" "$(git rev-parse --abbrev-ref HEAD)")
  if [[ -z $target ]]; then
    echo "ファイルまたはディレクトリが選択されていません"
    return 1
  fi

  # diff実行
  save_history git diff "$hash" -- "$target"
}

# filter git checkout for file
function fgco-branch-file(){
  # ブランチ選択
  local branch=$(FZF_DEFAULT_OPTS="--prompt='branch: ' --header='比較ブランチを選択'" br_fmt)
  if [[ -z $branch ]]; then
    echo "ブランチが選択されていません"
    return 1
  fi

  # ファイル＋ディレクトリ一覧を直接パイプでfilterに渡す
  local target=$(filter_git_file_or_dir "$(git rev-parse --abbrev-ref HEAD)" "$branch")
  if [[ -z $target ]]; then
    echo "ファイルまたはディレクトリが選択されていません"
    return 1
  fi

  # diff実行
  save_history git co "$branch" -- "$target"
}

# コミットハッシュを指定して、ファイルやディレクトリをfilterで選んでcheckoutを実行
function fgco-hash-file() {
  local hash="$1"
  if [[ -z $hash ]]; then
    echo "コミットハッシュを引数で指定してください 例: fgco-hash-file <commit-hash>"
    return 1
  fi

  # ファイル＋ディレクトリ一覧をfilterで選択
  local target=$(filter_git_file_or_dir "$(git rev-parse --abbrev-ref HEAD)" "$hash")
  if [[ -z $target ]]; then
    echo "ファイルまたはディレクトリが選択されていません"
    return 1
  fi

  # diff実行
  save_history git co "$hash" -- "$target"
}

# filter git show for file
function fgs-branch-file(){
  # ブランチ選択
  local branch=$(FZF_DEFAULT_OPTS="--prompt='branch: ' --header='比較ブランチを選択'" br_org)
  if [[ -z $branch ]]; then
    echo "ブランチが選択されていません"
    return 1
  fi

  # ファイル＋ディレクトリ一覧を直接パイプでfilterに渡す
  local target=$(filter_git_file_or_dir "$branch" "$(git rev-parse --abbrev-ref HEAD)")
  if [[ -z $target ]]; then
    echo "ファイルまたはディレクトリが選択されていません"
    return 1
  fi

  save_history git show "${branch}":"$target"
}

function fgs-hash-file() {
  local hash="$1"
  if [[ -z $hash ]]; then
    echo "コミットハッシュを引数で指定してください 例: fgs-hash-file <commit-hash>"
    return 1
  fi

  # ファイル＋ディレクトリ一覧をfilterで選択
  local target=$(filter_git_file_or_dir "$hash" "$(git rev-parse --abbrev-ref HEAD)")
  if [[ -z $target ]]; then
    echo "ファイルまたはディレクトリが選択されていません"
    return 1
  fi

  save_history git show "${hash}":"$target"
}

# GitHubのPRのようなブランチ間差分表示（共通祖先からの差分）
function fgd2(){
  local base
  base=$(FZF_DEFAULT_OPTS="--prompt='base: ' --header='比較元ブランチを選択'" br_org)
  local ret=$?
  if [[ $ret -ne 0 || -z $base ]]; then
    return 1
  fi
  local compare
  compare=$(FZF_DEFAULT_OPTS="--prompt='compare: ' --header='比較先ブランチを選択'" br_org)
  ret=$?
  if [[ $ret -ne 0 || -z $compare ]]; then
    return 1
  fi
  save_history git diff "$@" $base...$compare
}

# GitHubのPRのようなブランチ間ログ表示（共通祖先からの差分）
function fgl2(){
  local base
  base=$(FZF_DEFAULT_OPTS="--prompt='base: ' --header='比較元ブランチを選択'" br_org)
  local ret=$?
  if [[ $ret -ne 0 || -z $base ]]; then
    return 1
  fi
  local compare
  compare=$(FZF_DEFAULT_OPTS="--prompt='compare: ' --header='比較先ブランチを選択'" br_org)
  ret=$?
  if [[ $ret -ne 0 || -z $compare ]]; then
    return 1
  fi
  save_history git log "$@" $base..$compare
}

# ブランチを指定してGitHubのcompare urlを開く
function fgh_compare_url(){
  local base=`br_fmt`
	if test $? -ne 0
	then
		return 1
	fi
  local compare=`br_fmt`
	if test $? -ne 0
	then
		return 1
	fi

  gh_compare_url $base $compare
}

# マージ先のブランチ名を表示するPR一覧
function ghpl_branch() {
 ghpl --json number,title,author,baseRefName,headRefName \
    | jq -r '.[] | [.number, .title, .author.login, .baseRefName, .headRefName] | @tsv' \
    | filter --height 40% --layout reverse --info inline --border \
        --header $'Number\tTitle\tAuthor\tBase\tHead' \
        --delimiter $'\t' --with-nth 1,2,3,4,5
}

# GitHubのPR一覧からブランチ間差分表示（共通祖先からの差分）
function fgd_pr() {
  # GitHubのプルリクエスト一覧をTSV形式で取得
  selected_pr=$(ghpl_branch)

  # PRが選択された場合
  if [ -z "$selected_pr" ]; then
    return 1
  fi

  # 変数に分解
  IFS=$'\t' read pr_number title author base_ref head_ref <<< "$selected_pr"

  # リモートブランチをフェッチ
  git fetch origin "${base_ref}" "${head_ref}"

  # 差分を表示
  save_history git diff "$@" "origin/${base_ref}...origin/${head_ref}"
}

# GitHubのPR一覧からブランチ間ログ表示（共通祖先からの差分）
function fgl_pr() {
  # GitHubのプルリクエスト一覧をTSV形式で取得
  selected_pr=$(ghpl_branch)

  # PRが選択された場合
  if [ -z "$selected_pr" ]; then

    return 1
  fi

  # 変数に分解
  IFS=$'\t' read pr_number title author base_ref head_ref <<< "$selected_pr"

  # リモートブランチをフェッチ
  git fetch origin "${base_ref}" "${head_ref}"

  # ログを表示
  save_history git log "$@" "origin/${base_ref}..origin/${head_ref}"
}

# github cli
# マージ先ブランチを選んでPRを作成
alias fghpc='br_fmt | xargs gh pr create --web --base'
alias fghpch='_fgbh | xargs gh pr create --web --base'

# PR一覧からブラウザで開く
function fghpv(){
  ghpl | filter | awk '{print $1}' | xargs ghpv
}

# 自分のPR一覧からブラウザで開く
function fghpvm(){
  ghplm | filter | awk '{print $1}' | xargs ghpv
}

# PR一覧からチェックアウト
function fghco(){
  ghpl | filter | awk '{print $1}' | xargs ghco
}

# 自分のPR一覧からチェックアウト
function fghcom(){
  ghplm | filter | awk '{print $1}' | xargs ghco
}

# 2ブランチを指定してGitHubのPR作成urlを開く
function fghpc2(){
  local base
  base=$(FZF_DEFAULT_OPTS="--prompt='base: ' --header='マージ先ブランチを選択'" br_fmt)
  local ret=$?
  if [[ $ret -ne 0 || -z $base ]]; then
    return 1
  fi

  local compare
  compare=$(FZF_DEFAULT_OPTS="--prompt='compare: ' --header='マージブランチを選択'" br_fmt)
  ret=$?
  if [[ $ret -ne 0 || -z $compare ]]; then
    return 1
  fi

  ghpc --base $base --head $compare
}

alias fcd='fcd-down'
# fcd-down - cd to selected directory
# https://qiita.com/kamykn/items/aa9920f07487559c0c7e
function fcd-down() {
  local dir
  dir=$(fdd | filter --preview 'eza -T --color=always {} | head -100' +m) &&
  cd "$dir"
}

# 差分のあるファイルを選択してdiffを表示
function fgds() {
  # 変更のあるファイルとディレクトリのリストを生成
selection=$(
  {
    # 変更のあるファイルを取得
    git ls-files --modified --others --exclude-standard

    # ディレクトリも追加（重複を排除）
    git ls-files --modified --others --exclude-standard |
      grep -o "^.*/" |
      sort -u
  } |
  fzf --preview '
    if [[ -d {1} ]]; then
      # ディレクトリの場合はそのディレクトリ内の変更ファイル一覧を表示
      git diff --name-status -- {1}
    else
      # ファイルの場合はdiffを表示
      git diff --color=always -- {1}
    fi
  '
)

# 選択されたものがあれば処理を続行
if [ -n "$selection" ]; then
    git diff --color=always -- "$selection" | less -R
fi
}

# fzfでdockerコンテナに入る
# https://yiskw713.hatenablog.com/entry/2022/01/12/200000#fgc-%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%83%96%E3%81%ABgit-checkout%E3%81%99%E3%82%8B
function fdocker-container() {
  local cid
  cid=$(docker ps | sed 1d | fzf -q "$1" | awk '{print $1}')
  [ -n "$cid" ] && docker exec -it "$cid" sh
}

# fzfでdockerのログを取得
# https://yiskw713.hatenablog.com/entry/2022/01/12/200000#fgc-%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%83%96%E3%81%ABgit-checkout%E3%81%99%E3%82%8B
function fdocker-log() {
  local cid
  cid=$(docker ps -a | sed 1d | fzf -q "$1" | awk '{print $1}')
  [ -n "$cid" ] && docker logs -f --tail=200 "$cid"
}

# 関数・エイリアス名をfzfで選んで実行するウィジェット
function falias() {
  local funcs aliases selected
  funcs=$(print -l ${(k)functions} \
    | grep -v "^_" \
    | grep -v "^-" \
    | grep -v "+" \
    | grep -v "\." \
    | grep -v "/" \
    | grep -v ":" \
    | grep -v "^falias")
  aliases=$(alias | cut -d'=' -f1)
  selected=$((echo "$funcs"; echo "$aliases") | sort | uniq | fzf --exact --reverse --no-sort --query="$LBUFFER" --cycle --prompt="関数/エイリアス > ")
  if [[ -z "$selected" ]]; then
    return 1
  fi
    save_history "$selected" "$@"
}

alias fa='falias'