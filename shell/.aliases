#!/bin/zsh

EDIT_COMMAND='code'
export VISUAL='nvim'

#expanded command
case "${OSTYPE}" in
# --------------- Mac(Unix) ---------------
darwin*)
# ここに設定
# alias ls='ls -G'
# alias la='ls -A'
alias v='code'
alias cu='cursor'
alias ls='eza --time-style=long-iso -g'
alias tree='eza -T --color=always'
alias la='ls -a'
alias ll='la -lm --git'
alias df='duf'
alias top='glances'
alias wget='aria2c'
alias curl='https'
alias fda='fd -HI'
alias fdh='fd -H'
alias fdi='fd -I'
alias fdad='fda --type=d'
alias fdhd='fdh --type=d'
alias fdhd='fdi --type=d'
alias cat='bat --style=plain'
alias du='dust'
alias cl='claude'

alias l='ls'

alias -g L='| less'
#MacVim on CUI
alias vi='nv'
alias -g nvim-orig='nvim -u NONE --noplugin'
alias -g nv='nvim'

alias pg='sudo purge'

alias cask='brew cask'

alias karabiner-export='/Applications/Karabiner.app/Contents/Library/bin/karabiner export > ${SET}mac/karabiner-setting.sh'
alias karabiner-import='sh ${SET}mac/karabiner-setting.sh'

alias rm='trash'

# 事故死予防
alias cp='cp -i'
alias mv='mv -i'

alias pv='popd'
# alias up='cd ../'

alias ng='noglob'

#display all files,End with true or false
alias allfile='defaults write com.apple.finder AppleShowAllFiles'

alias -g pc='tee >(pbcopy)'
alias -g pp='pbpaste'

;;

# --------------- Linux ---------------
linux*)
# ここに設定
  alias ls='ls --color=auto'
  function vi(){
	  gvim -f --remote-tab-silent "${@}" &
  }
;;
esac

# --------------- 共通設定 ---------------

#make new alias
alias reload='zcompile ~/.zshrc;source ~/.zshrc;echo "zshrc reloaded.";zcompile ~/.zprofile;source ~/.zprofile;echo "zprofile reloaded."'
alias rm_zwc='rm ~/*.zwc;rm ${SET}/shell/*.zwc;echo "zwc removed."'

#cd
alias cdd='cd ~/Desktop'
alias cdrepo='cd ${REPO}'
alias cds='cd ${SET}'

#shortcut for setting files
alias zshrc_local='${EDIT_COMMAND} ~/.zshrc_local'
alias zshenv='${EDIT_COMMAND} ~/.zshenv'
alias zprofile='${EDIT_COMMAND} ~/.zprofile'
alias setting='${EDIT_COMMAND} ${SET}'
alias s='setting'

# shortcut for docker
alias d='docker'
alias dps='d ps'

#shortcut for git
alias cdgr='cd `g repository`'
alias g='noglob git'
alias ga='git add'
alias gaa='ga .'
alias gb='git branch'
alias gbD='gb -D'
alias gba='gb -a'
alias gbd='gb -d'
alias gca='gci --amend'
alias gcb='git current-branch'
alias gcbc='gcb | tr -d "\n" | pc;echo'
alias gcf='g conflicts'
alias gci='git ci'
alias gcl='g cl'
alias gcln='gcl -n'
alias gcm='gci -m'
alias gco='git co'
alias gcoo='gco --ours'
alias gcot='gco --theirs'
alias gcp='g cp'
alias gd='git diff'
alias gdc='gd --cached'
alias gdn='gd --name-status'
alias gfp='git fetch --all --prune'
alias gl='git log'
alias gln='gl --name-status'
alias glst='gl --stat'
alias glp='gl -p'
# git log for code copy
alias glpc='git -c delta.side-by-side=false -c delta.line-numbers=false log -p'
alias gmg='git merge'
alias gmgs='gmg --squash'
alias gpl='g pl'
alias gps='git push -u'
alias grm='g rm'
alias grv='g rv'
alias gs='git s'
alias gsa='g s -s --porcelain | grep "^ A"'
alias gsd='g s -s --porcelain | grep "^ D"'
alias gsm='g s -s --porcelain | grep "^ M"'
alias gsu='g s -s --porcelain | grep "^?"'
alias gsw='g sw'
gswc() {
  noglob git sw --no-track -c "$@"
}
alias gmt='g mt'
alias gst='git st'
alias gstd='gst drop'
alias gstp='gst pop'
alias gsts='gst show'
alias gstu='gst -u'
alias gprb='gpl --rebase'

# github cli
gh config set editor "nvim"

alias ghb='gh browse'
alias ghpc='gh pr create --web'
alias -g ghpv='gh pr view --web'
alias -g ghco='gh co'
alias gh-dash='gh dash'
alias ghd='gh-dash'
alias ghf='gh f'
alias ghf-gha='gh f -r'
alias ghf-grep-file-history='gh f -g'
alias ghf-branch='gh f -b'
alias ghf-config='gh f -e'
alias ghf-pick='gh f -k'
alias ghf-logs='gh f -l'
alias ghf-prs='gh f -p'

# デフォルトの30件だと少ないので増やして取得
alias ghpl='gh pr list -L 200'
alias ghplm='ghpl --author @me'
alias ghplw='ghpl --web'
alias ghplmw='ghplw --author @me'

alias -g rg='RIPGREP_CONFIG_PATH=${SET}/configs/.ripgreprc rg'

VIMRUNTIME=$(nvim --clean --headless --cmd 'echo $VIMRUNTIME|q' 2>&1)
alias vless="${VIMRUNTIME}/scripts/less.sh"


function gbl(){
  git bl "${@}" | gsed -f "${SET}sedfiles/colorize_git_blame.sed" | less
}

function tailf(){
  tail -f "${@}" | gsed -f "${SET}sedfiles/colorize_log.sed"
}

function gbm(){
  branch=$(git current-branch)
  git branch -m "${branch}" "${@}"
}

alias zmv='noglob zmv -W'
alias zcp='zmv -C'

alias vimdiff='nvim-orig -d'
alias vd='vimdiff'

# util
alias sz='dust -d 1 -Dr'

# tmux
alias tm='tmux'
alias tmks='tm kill-server'

#tig/gitui
alias t='lazygit'

# tmuxで新しくペインを作成してコマンドを実行
# 水平分割
function sp() {
  _sp "$*"
}
# 水平分割してless
function spl() {
  _sp "$* | less"
}

function _sp() {
  tmux split-window "$*"
}

# 垂直分割
function vsp() {
  _vsp "$*"
}

# 垂直分割してless
function vspl() {
  _vsp "$* | less"
}

function _vsp() {
  tmux split-window -h "$*"
}

# http://stackoverflow.com/questions/5349718/how-can-i-repeat-a-character-in-bash
function up() {
	if test $# -lt 1; then
	    echo $#
	  cd ../
		return 0
  fi
  tmp=''
  repeat "$1" tmp+='../'
  cd "$tmp" || exit

}

# rangerのサブシェルのネストを防止する
function ranger() {
    if [ -z "${RANGER_LEVEL}" ]; then
        "${BREW_PREFIX}"/bin/ranger "${@}"
    else
        exit
    fi
}

# http://shigemk2.hatenablog.com/entry/20130629/1372463353
# 現在の作業ブランチにマージしていないブランチを削除
alias g-delete-remote-merged-branches="g-remote-merged-branches | xargs -I% git push origin :%"
alias g-remote-merged-branches="git branch -a --merged | 'grep' -v '*' | 'grep' -v master | 'grep' remotes/origin/ | sed -e 's% *remotes/origin/%%'"
alias g-remote-merged-branches_orig="git branch -a --merged | 'grep' -v '*' | 'grep' -v master | 'grep' remotes/origin/"

alias g-delete-remote-merged-branches-dry-run="g-remote-merged-branches | xargs -I% git push -n origin :% 2>&1 | tee -a ~/Desktop/delete_branches_dry_run.log"
alias g-delete-remote-merged-branches="g-remote-merged-branches | xargs -I% git push origin :% 2>&1 | tee -a ~/Desktop/delete_branches.log"

alias g-delete-remote-branches-hash-check="g-remote-merged-branches_orig | xargs -I{} sh -c 'echo {};git rev-parse {};echo ""' 2>&1 | tee -a ~/Desktop/delete_branches_hash_check.txt"

alias g-merged-branches="git merged-branches | grep -vE '^\*|master$|develop$'"
alias g-delete-merged-branches="g-merged-branches | xargs -I% git branch -d %"

# 単語を使ってブランチを削除
function g-remote-branches-by-word(){
  git branch -a | grep -v '*' | grep -v master | grep "$1" | grep remotes/origin/
}

function g-remote-branches-by-word-fmt(){
  g-remote-branches-by-word "$1" | sed -e 's% *remotes/origin/%%'
}

function g-delete-remote-branches-by-word-hash-check() {
  g-remote-branches-by-word "$1" | xargs -I{} sh -c 'echo {};git rev-parse {};echo ""' 2>&1 | tee -a ~/Desktop/delete_branches_hash_check.txt
}

function g-delete-remote-branches-by-word-dry-run() {
  g-remote-branches-by-word-fmt "$1" | xargs -I% git push -n origin :% 2>&1 | tee -a ~/Desktop/delete_branches_dry_run.log
}

function g-delete-remote-branches-by-word() {
  g-remote-branches-by-word-fmt "$1" | xargs -I% git push origin :% 2>&1 | tee -a ~/Desktop/delete_branches.log
}

function g-delete-branch-not-in-remote-interactive() {
  # ディレクトリ移動
  # cd $1

  # レポジトリ名確認
  local tmp_path=$(git rev-parse --show-toplevel 2>/dev/null)
  if [ -n "${tmp_path}" ]; then
    local repo_name=$(basename "${tmp_path}")
    echo "repository is '${repo_name}'."
  else
    echo "$1 is not git repository."
    return 1
  fi

  # 最新のリモート情報をフェッチ
  git fetch --prune

  # ローカルブランチ（現在のブランチは除外）
  local local_branches=( $(git branch | grep -v '*' -p) )  # リモートブランチ（「origin/HEAD -> origin/master」の行を除外し、「origin/」を消す）
  local remote_branches=( $(git branch -r | grep -v '\->' -p | sed -e 's/origin\///') )
  for local_branch in ${local_branches}
  do
    # ローカルブランチがリモートにあるか確認
    local is_in_remote=false
    for remote_branch in ${remote_branches}
    do
      if [[ "${local_branch}" = "${remote_branch}" ]]; then
        is_in_remote=true
        break
      fi
    done

    # リモートになかったら確認プロンプトを出す
    if [[ ${is_in_remote} = false ]]; then
      echo "branch '${local_branch}' is not in remote. delete it? [y/N]"

      read -r ANSWER

      # 「Y」、「y」などであれば削除
      case ${ANSWER} in
        "Y" | "y" | "yes" | "Yes" | "YES" ) git branch -D "${local_branch}";;
        * ) echo "not delete branch '${local_branch}'.";;
      esac
    fi
  done
}

function fullpath(){
  echo "${PWD}/${1}"
}

# gitのリポジトリルートからの相対パス
relpath() {
  file="${1}"
  if [[ -z "${file}" ]]; then
      echo "Usage: $0 <file>"
      return 1
  fi

  git_root=$(git rev-parse --show-toplevel 2>/dev/null)
  if [[ $? -ne 0 ]]; then
      echo "Error: Not in a Git repository." >&2
      return 1
  fi

  file_abs=$(realpath "${file}" 2>/dev/null)
  if [[ -z "${file_abs}" ]]; then
      echo "Error: File '${file}' not found." >&2
      return 1
  fi

  git_root="${git_root%/}"
  if [[ "${file_abs}" != "${git_root}"/* ]]; then
      echo "Error: File is not inside the Git repository." >&2
      return 1
  fi

  rel_path="${file_abs#"${git_root}"/}"
  echo "${rel_path}"
}

# 引数の2リビジョンを比較するGitHubのcompare urlを開く
gh_compare_url() {
  if [ $# -ne 2 ]; then
    echo "Usage: git_compare_url BASE COMPARE"
    return 1
  fi

  remote_url=$(git remote get-url origin)

  repo_url=$(echo "${remote_url}" | sed -e 's/git@github.com:/https:\/\/github.com\//' -e 's/\.git$//')

  save_history open "${repo_url}/compare/${1}...${2}"
}

alias fp='fullpath'
alias rp='relpath'

# IntelliJでファイルを開く
function ij(){
    /Applications/IntelliJ\ IDEA.app/Contents/MacOS/idea $(fullpath "${1}")
}
