#!/bin/sh
EDIT_COMMAND='zed'
export VISUAL='nvim'

#expanded command
case "${OSTYPE}" in
# --------------- Mac(Unix) ---------------
darwin*)
# ここに設定
# alias ls='ls -G'
# alias la='ls -A'
alias ls='eza --time-style=long-iso -g'
alias tree='eza -T'
alias la='ls -a'
alias ll='la -lm --git'
alias df='duf'
alias top='glances'
alias wget='aria2c'
alias curl='https'
alias find='fd'
alias -g L='| less'
alias -g LC='| lessc'
#MacVim on CUI
# alias -g VI='mvim --remote-tab-silent'
# alias vi='mvim --remote-tab-silent'
alias vi='nv'
# alias vim-orig='vim -u NONE --noplugin'
alias -g nvim-orig='nvim -u NONE --noplugin'
alias -g nv='nvim'

# function es(){
#   emacs $@ &
# }
# function ec(){
#   emacsclient $@ &
# }
# alias visp='mvim -o'
# alias vivsp='mvim -O'
alias pg='sudo purge'

alias br='brew'
alias cask='brew cask'
alias cat='bat --style=plain'
alias du='dust'

alias karabiner-export='/Applications/Karabiner.app/Contents/Library/bin/karabiner export > ${SET}mac/karabiner-setting.sh'
alias karabiner-import='sh ${SET}mac/karabiner-setting.sh'

alias rm='trash'

# 事故死予防
alias cp='cp -i'
alias mv='mv -i'

alias pv='popd'
# alias up='cd ../'

alias ng='noglob'

#display all files,End with true or false
alias allfile='defaults write com.apple.finder AppleShowAllFiles'

# for server
alias ap='sudo apachectl'
alias cdphp='cd /Library/WebServer/Documents/'
alias cdphpl='cd /Users/${USER}/Sites'
alias -g pc='pbcopy'
alias -g pp='pbpaste'
;;

# --------------- Linux ---------------
linux*)
# ここに設定
  alias ls='ls --color=auto'
  function vi(){
	  gvim -f --remote-tab-silent $@ &
  }
;;
esac

# --------------- 共通設定 ---------------

#make new alias
#alias refresh='source ~/.bashrc'
alias reload='zcompile ~/.zshrc;source ~/.zshrc;echo "zshrc reloaded.";zcompile ~/.zprofile;source ~/.zprofile;echo "zprofile reloaded."'

alias pyserv='python -m SimpleHTTPServer'

alias l='eza'
alias le='less'

#cd
alias cdd='cd ~/Desktop'
alias cdrepo='cd ${REPO}'
alias cds='cd ${SET}'

#shortcut for setting files
alias bashrc="$EDIT_COMMAND ~/.bashrc"
alias zshrc="$EDIT_COMMAND ${SET}/shell/.zshrc"
alias filterconfig="$EDIT_COMMAND ${SET}/shell/.zshrc_filter"
alias aliases="$EDIT_COMMAND ${SET}/shell/.aliases"
# alias vimrc="$EDIT_COMMAND ~/.vimrc"
# alias gvimrc="$EDIT_COMMAND ~/.gvimrc"
alias nviminit="$EDIT_COMMAND ${SET}/vimfiles/nvim/init.vim"
alias vimrc_common="$EDIT_COMMAND ${SET}/vimfiles/.vimrc.common"
alias gitconfig="$EDIT_COMMAND ${SET}/gitfiles/.gitconfig"
alias zshenv="$EDIT_COMMAND ~/.zshenv"
alias zprofile="$EDIT_COMMAND ~/.zprofile"
alias jshintrc="$EDIT_COMMAND ~/.jshintrc"
alias jsbeautifyrc="$EDIT_COMMAND ~/.jsbeautifyrc"
alias editorconfig="$EDIT_COMMAND ~/.editorconfig"
alias tmuxconf="$EDIT_COMMAND ${SET}/.tmux.conf"
alias macinit="$EDIT_COMMAND ${SET}/mac/initialize"
alias macupdate="$EDIT_COMMAND ${SET}/mac/update"
alias submoduleconf="$EDIT_COMMAND ${SET}/.gitmodules"
# alias tigrc="$EDIT_COMMAND ${SET}/.tigrc"
alias dein="$EDIT_COMMAND ${SET}/vimfiles/dein/nvim/dein.toml"
alias dein_lazy="$EDIT_COMMAND ${SET}/vimfiles/dein/nvim/dein_lazy.toml"
# alias atomconfig='$EDIT_COMMAND ${SET}/atom/.atom/config.cson'

#shortcut for git
alias cdgr='cd `g repository`'
alias g='noglob git'
alias ga='git add'
alias gaa='ga .'
alias gac='git add reset HEAD'
alias gad='git added'
alias gb='git branch'
alias gbD='gb -D'
alias gba='gb -a'
alias gbd='gb -d'
alias gbrsync='git fetch --prune'
alias gbs='g bs'
alias gbsb='g bs bad'
alias gbsg='g bs good'
alias gca='gci --amend'
alias gcb='git current-branch'
alias gcf='g conflicts'
alias gci='git ci'
alias gcl='g cl'
alias gcln='gcl -n'
alias gcm='gci -m'
alias gco='git co'
alias gcoo='gco --ours'
alias gcot='gco --theirs'
alias gcp='g cp'
alias gd='git diff'
alias gdc='gd --cached'
alias gdel='git deleted'
alias gdfw='git wdf'
alias gdn='gd --name-status'
alias gdp='ng git diff HEAD^ HEAD'
alias gdt='g dt'
alias gfp='git fetch --all --prune'
alias gft='git fetch'
alias ggr='git gr'
alias ghb='git hisback'
alias gl1='gl --oneline'
alias gl='git log'
alias glg='git lg'
alias gln='gl --name-only'
alias glns='gl --name-status'
alias glp='gl -p'
alias glst='gl --stat'
alias gmd='git modified'
alias gmg='git merge'
alias gmgs='gmg --squash'
alias gmt='g mt'
alias gmv='g mv'
alias gpl-dry-run='git pull-dry-run'
alias gpl='g pl'
alias gps-dry-run='git push -n'
alias gps='git push -u'
alias gr0='g r0'
alias grb='git rb'
alias grba='grb --abort'
alias grbc='grb --continue'
alias grbi='grb -i'
alias grl='g rl'
alias grm='g rm'
alias grn='basename `g repository`'
alias grp='git remote prune origin'
alias grv='g rv'
alias gs='git s'
alias gsa='g s -s | grep "A"'
alias gsd='g s -s | grep "D"'
alias gsm='g s -s | grep "M"'
alias gsms='g sm status'
alias gsmu='g smupdate'
alias gst='git st'
alias gstd='gst drop'
alias gstp='gst pop'
alias gsts='gst show'
alias gstu='gst -u'
alias gsu='g s -s | grep "U"'
alias gsuu='g s -s | grep "UU"'
alias gtr='git tree'
alias gvdf='git vdf'
alias gvmd='git vmodified'
alias gsw='g sw'
alias gswc='g sw -c'

alias gh-pr-create='gh pr create --web'
alias gh-pr-view='gh pr view --web'

function lessc(){
	export LESSOPEN='| /usr/local/bin/src-hilite-lesspipe.sh %s'
	less $1
	LESSOPEN=''
}
# alias vless='/usr/local/share/vim/vim74/macros/less.sh'


function gbl(){
  g bl $@ | gsed -f "${SET}sedfiles/colorize_git_blame.sed" | less
}

function tflog(){
  tail -f $@ | gsed -f "${SET}sedfiles/colorize_log.sed"
}

function gdfb(){
  branch=`g current-branch`
  g df $1 "${branch}" $2
}

function gprb(){
  branch=`g current-branch`
  remote=`g remote`
  g pl --rebase "${remote}" "${branch}"
}

function gbm(){
  branch=`g current-branch`
  gb -m "${branch}" $@
}

function gd-file(){
	if test $# -eq 0
	then
		echo "no argument found."
		return 1
	fi
  my_branch=`g current-branch`
	if test $# -eq 1
	then
		gd master $my_branch $1
		return 0
	fi
  gd $1 $my_branch $2
}

#shortcut for Application
alias e='./a.out'
# alias cot='open -a CotEditor'
# alias aq='aquamacs'
alias ccp='noglob ccp'

alias zmv='noglob zmv -W'
alias zcp='zmv -C'

alias vimdiff='nvim-orig -d'
alias vd='vimdiff'

# util
alias sz='dust -d 1 -Dr'

# tmux
alias tm='tmux'
alias tma='tm a -t'
alias tmn='tm new'
alias tmc='tm new -s'
alias tmr='tm rename-session -t'
alias tmk='tm kill-session -t'
alias tmks='tm kill-server'
alias tmss='tm start-server'

#tig/gitui
alias t='lazygit'

alias -g V='| view -'

alias php-syntax-check='find . -name "*.php" -exec php -l {} \; | grep -v "No syntax errors detected in"'
alias php-syntax-check-full='find . -name "*.php" -exec php -l {} \;'

# 現在のディレクトリ以下の当てはまるファイルを全て削除する
# http://www.omnioo.com/omnioolab/2012/07/find.php
alias rrm='noglob _rrm'
function _rrm(){
  opt=""
  rmopt=""
  while getopts "i" flag; do
    case $flag in
      \?) arg+=$flag; break;;
      i) opt+="i";rmopt+="i";;
    esac
  done
  shift $(( $OPTIND - 1 ))

  find -L . "-${opt}name" "*${@}*"
  echo "remove all above? [y/N]"
  read ANSWER
  case $ANSWER in
      "Y" | "y" | "yes" | "Yes" | "YES" )
          find -L . "-${opt}name" "*${@}*" -exec rm "-r${rmopt}" {} \;;
          echo "$@ removed recursively.";;
      * ) echo "rrm canceled.";;
  esac
}

# Haskellのファイルをa.outでコンパイルする
# その際、オブジェクトファイル(.o)とインターフェースファイル(.hi)を削除
function ghca(){
    ghc $1 -o a.out
        ret=$?
        if test ${ret} -eq 0
            then
                fname=`echo $1 | sed -e "s/\.[^.]*$//"`
                rm ${fname}.hi
                rm ${fname}.o
                fi
}

# tmuxで新しくペインを作成してコマンドを実行
# 水平分割
function sp() {
  _sp "$*"
}
# 水平分割してless
function spl() {
  _sp "$* | less"
}

function _sp() {
  tmux split-window "$*"
}

# 垂直分割
function vsp() {
  _vsp "$*"
}

# 垂直分割してless
function vspl() {
  _vsp "$* | less"
}

function _vsp() {
  tmux split-window -h "$*"
}

# http://stackoverflow.com/questions/5349718/how-can-i-repeat-a-character-in-bash
function up() {
	if test $# -lt 1; then
	    echo $#
	  cd ../
		return 0
  fi
  tmp=''
  repeat $1 tmp+='../'
  cd "$tmp"

}

# rangerのサブシェルのネストを防止する
function ranger() {
    if [ -z "$RANGER_LEVEL" ]; then
        $BREW_PREFIX/bin/ranger $@
    else
        exit
    fi
}


# function dirdiff(){
  # vim -c DirDiff $1 $2
# }

# http://shigemk2.hatenablog.com/entry/20130629/1372463353
# 現在の作業ブランチにマージしていないブランチを削除
alias g-delete-remote-merged-branches="g-remote-merged-branches | xargs -I% git push origin :%"
alias g-remote-merged-branches="git branch -a --merged | 'grep' -v '*' | 'grep' -v master | 'grep' remotes/origin/ | sed -e 's% *remotes/origin/%%'"
alias g-remote-merged-branches_orig="git branch -a --merged | 'grep' -v '*' | 'grep' -v master | 'grep' remotes/origin/"

alias g-delete-remote-merged-branches-dry-run="g-remote-merged-branches | xargs -I% git push -n origin :% 2>&1 | tee -a ~/Desktop/delete_branches_dry_run.log"
alias g-delete-remote-merged-branches="g-remote-merged-branches | xargs -I% git push origin :% 2>&1 | tee -a ~/Desktop/delete_branches.log"

alias g-delete-remote-branches-hash-check="g-remote-merged-branches_orig | xargs -I{} sh -c 'echo {};git rev-parse {};echo ""' 2>&1 | tee -a ~/Desktop/delete_branches_hash_check.txt"

alias g-merged-branches="git merged-branches | grep -vE '^\*|master$|develop$'"
alias g-delete-merged-branches="g-merged-branches | xargs -I% git branch -d %"

# 単語を使ってブランチを削除
function g-remote-branches-by-word(){
  git branch -a | grep -v '*' | grep -v master | grep $1 | grep remotes/origin/
}

function g-remote-branches-by-word-fmt(){
  g-remote-branches-by-word $1 | sed -e 's% *remotes/origin/%%'
}

function g-delete-remote-branches-by-word-hash-check() {
  g-remote-branches-by-word $1 | xargs -I{} sh -c 'echo {};git rev-parse {};echo ""' 2>&1 | tee -a ~/Desktop/delete_branches_hash_check.txt
}

function g-delete-remote-branches-by-word-dry-run() {
  g-remote-branches-by-word-fmt $1 | xargs -I% git push -n origin :% 2>&1 | tee -a ~/Desktop/delete_branches_dry_run.log
}

function g-delete-remote-branches-by-word() {
  g-remote-branches-by-word-fmt $1 | xargs -I% git push origin :% 2>&1 | tee -a ~/Desktop/delete_branches.log
}

function g-delete-branch-not-in-remote-interactive() {
  # ディレクトリ移動
  # cd $1

  # レポジトリ名確認
  local tmp_path=$(git rev-parse --show-toplevel 2>/dev/null)
  if [ -n "$tmp_path" ]; then
    local repo_name=`basename $tmp_path`
    echo "repository is '$repo_name'."
  else
    echo "$1 is not git repository."
    return 1
  fi

  # 最新のリモート情報をフェッチ
  git fetch --prune

  # ローカルブランチ（現在のブランチは除外）
  local local_branches=( $(git branch | grep -v '*' -p) )  # リモートブランチ（「origin/HEAD -> origin/master」の行を除外し、「origin/」を消す）
  local remote_branches=( $(git branch -r | grep -v '\->' -p | sed -e 's/origin\///') )
  for local_branch in $local_branches
  do
    # ローカルブランチがリモートにあるか確認
    local is_in_remote=false
    for remote_branch in $remote_branches
    do
      if [[ "$local_branch" = "$remote_branch" ]]; then
        is_in_remote=true
        break
      fi
    done

    # リモートになかったら確認プロンプトを出す
    if [[ $is_in_remote = false ]]; then
      echo "branch '$local_branch' is not in remote. delete it? [y/N]"

      read -r ANSWER

      # 「Y」、「y」などであれば削除
      case $ANSWER in
        "Y" | "y" | "yes" | "Yes" | "YES" ) git branch -D $local_branch;;
        * ) echo "not delete branch '$local_branch'.";;
      esac
    fi
  done

  # cd $OLDPWD
}

function fullpath(){
  echo "${PWD}/${1}"
}

# IntelliJでファイルを開く
function ij(){
    /Applications/IntelliJ\ IDEA.app/Contents/MacOS/idea `fullpath $1`
}
