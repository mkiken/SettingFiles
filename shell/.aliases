#!/bin/sh
EDIT_COMMAND='vimr'
export VISUAL='nvim'

#expanded command
case "${OSTYPE}" in
# --------------- Mac(Unix) ---------------
darwin*)
# ここに設定
# alias ls='ls -G'
# alias la='ls -A'
alias la='exa -a'
alias ll='la -lm --git'
alias -g L='| less'
#MacVim on CUI
alias -g VI='mvim --remote-tab-silent'
# alias vi='mvim --remote-tab-silent'
alias vi='nv'
# alias vim-orig='vim -u NONE --noplugin'
alias nvim-orig='nvim -u NONE --noplugin'
alias nv='nvim'
# alias visp='mvim -o'
# alias vivsp='mvim -O'
alias pg='sudo purge'
alias ag='ag -S --stats -m 100000 --color'
alias agh='ag --hidden'
alias agl='ag -l'
# http://shigemk2.hatenablog.com/entry/2014/09/08/find%E3%81%A8silver_searcher%E3%82%92%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%E3%81%A6%E3%80%81%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D%E3%82%92%E6%A4%9C%E7%B4%A2%E3%81%99%E3%82%8B
alias agf='find . -type f | ag'
alias agd='find . -type d | ag'
alias agn='find . | ag'
alias agu='ag -u' # 隠しファイルおよび無視リストも対象
alias agp='ag --pager="less -R"'
alias agg='ag --hidden -g' # ファイル名で検索（隠しファイル含む）
alias agga='ag -u -g' # ファイル名で検索（全てのファイル）
alias agq='ag -Q' # 正規表現を無視

alias br='brew'
alias cask='brew cask'
alias cat='bat -p'
alias ls='exa'
alias tree='exa -T'
alias du='dust'

# alias at='atom'

alias karabiner-export='/Applications/Karabiner.app/Contents/Library/bin/karabiner export > ${SET}mac/karabiner-setting.sh'
alias karabiner-import='sh ${SET}mac/karabiner-setting.sh'

# http://tukaikta.blog135.fc2.com/blog-entry-214.html
alias rm='rmtrash'

# 事故死予防
alias cp='cp -i'
alias mv='mv -i'

alias pv='popd'
# alias up='cd ../'

alias ng='noglob'

#display all files,End with true or false
alias allfile='defaults write com.apple.finder AppleShowAllFiles'

# for server
alias ap='sudo apachectl'
alias phpini='$EDIT_COMMAND /etc/php.ini'
alias phpini2='sudo $EDIT_COMMAND /etc/php.ini'
alias cdphp='cd /Library/WebServer/Documents/'
alias cdphpl='cd /Users/${USER}/Sites'
alias httpdconf='$EDIT_COMMAND /private/etc/apache2/httpd.conf'
alias httpdconf2='sudo $EDIT_COMMAND /private/etc/apache2/httpd.conf'
alias -g pc='pbcopy'
alias -g pp='pbpaste'
;;

# --------------- Linux ---------------
linux*)
# ここに設定
  alias ls='ls --color=auto'
  function vi(){
	  gvim -f --remote-tab-silent $@ &
  }
;;
esac

# --------------- 共通設定 ---------------

#make new alias
#alias refresh='source ~/.bashrc'
alias reload='zcompile ~/.zshrc;source ~/.zshrc;echo "zshrc reloaded.";zcompile ~/.zprofile;source ~/.zprofile;echo "zprofile reloaded."'

alias pyserv='python -m SimpleHTTPServer'

alias l='exa'
alias le='less'

#cd
alias cdd='cd ~/Desktop'
alias cdrepo='cd ${REPO}'
alias cds='cd ${SET}'

#shortcut for setting files
alias bashrc='$EDIT_COMMAND ~/.bashrc'
alias zshrc='$EDIT_COMMAND ${SET}/shell/.zshrc'
alias filterconfig='$EDIT_COMMAND ${SET}/shell/.zshrc_filter'
alias aliases='$EDIT_COMMAND ${SET}/shell/.aliases'
# alias vimrc='$EDIT_COMMAND ~/.vimrc'
# alias gvimrc='$EDIT_COMMAND ~/.gvimrc'
alias nviminit='$EDIT_COMMAND ${SET}/vimfiles/nvim/init.vim'
alias vimrc_common='$EDIT_COMMAND ${SET}/vimfiles/.vimrc.common'
alias gitconfig='$EDIT_COMMAND ${SET}/gitfiles/.gitconfig'
alias zshenv='$EDIT_COMMAND ~/.zshenv'
alias zprofile='$EDIT_COMMAND ~/.zprofile'
alias jshintrc='$EDIT_COMMAND ~/.jshintrc'
alias jsbeautifyrc='$EDIT_COMMAND ~/.jsbeautifyrc'
alias editorconfig='$EDIT_COMMAND ~/.editorconfig'
alias tmuxconf='$EDIT_COMMAND ${SET}/.tmux.conf'
alias macinit='$EDIT_COMMAND ${SET}/mac/initialize'
alias macupdate='$EDIT_COMMAND ${SET}/mac/update'
alias submoduleconf='$EDIT_COMMAND ${SET}/.gitmodules'
alias tigrc='$EDIT_COMMAND ${SET}/.tigrc'
alias dein='$EDIT_COMMAND ${SET}/vimfiles/dein/nvim/dein.toml'
alias dein_lazy='$EDIT_COMMAND ${SET}/vimfiles/dein/nvim/dein_lazy.toml'
# alias atomconfig='$EDIT_COMMAND ${SET}/atom/.atom/config.cson'

#shortcut for git
alias g='noglob git'
alias gs='git s'
alias ga='git add'
alias gaa='ga .'
# alias gra='git rmall'
alias gcm='gci -m'
alias gci='git commit'
alias gca='gci --amend'
alias gps='git push -u'
alias gps-dry-run='git push -n'
# alias gpl='git current-branch | git pull origin'
alias gd='git diff'
alias gmd='git modified'
alias gdc='gd --cached'
alias gad='git added'
alias gdel='git deleted'
alias gpl-dry-run='git pull-dry-run'
alias gcb='git current-branch'
alias grb='git rb'
alias grba='grb --abort'
alias grbc='grb --continue'
alias grbi='grb -i'
alias gdfw='git wdf'
alias gtr='git tree'
alias gl='git log'
alias ggr='git gr'
alias glg='git lg'
alias ghb='git hisback'
alias gb='git branch'
alias gft='git fetch'
alias gvdf='git vdf'
alias gvmd='git vmodified'
alias gco='git co'
alias gst='git st'
alias gstu='gst -u'
alias glst='gl --stat'
alias gln='gl --name-only'
alias glns='gl --name-status'
alias glp='gl -p'
alias gcl='git clean'
alias gmg='git merge'
alias gmgs='gmg --squash'
alias gcob='gco -b'
alias gba='gb -a'
alias gstd='gst drop'
alias gstp='gst pop'
alias gsts='gst show'
alias gl1='gl --oneline'
alias gmv='g mv'
alias grm='g rm'
alias gbrsync='git fetch --prune'
# alias gprb='g pl --rebase'
alias gr0='g r0'
# alias gbd='gb -d'
alias gcl='g cl'
alias gsuu='g s -s | grep "UU"'
alias gsu='g s -s | grep "U"'
alias gsa='g s -s | grep "A"'
alias gsm='g s -s | grep "M"'
alias gsd='g s -s | grep "D"'
alias gcoo='gco --ours'
alias gcot='gco --theirs'
alias gac='git add reset HEAD'
alias gbd='gb -d'
alias gbD='gb -D'
alias gdn='gd --name-status'
alias gdp='ng git diff HEAD^ HEAD'
alias gcp='g cp'
alias gcln='gcl -n'
alias grl='g rl'
alias grv='g rv'
alias gcf='g conflicts'
alias gdt='g dt'
alias gmt='g mt'
alias gbs='g bs'
alias gbsg='g bs good'
alias gbsb='g bs bad'
alias gsmu='g smupdate'
alias gsms='g sm status'
alias grp='git remote prune origin'
alias gfp='git fetch --all --prune'
alias cdgr='cd `g repository`'
alias grn='basename `g repository`'
alias gpl='g pl'

function lessc(){
	export LESSOPEN='| /usr/local/bin/src-hilite-lesspipe.sh %s'
	less $1
	LESSOPEN=''
}
# alias vless='/usr/local/share/vim/vim74/macros/less.sh'


function gbl(){
  g bl $@ | gsed -f "${SET}sedfiles/colorize_git_blame.sed" | less
}

function tflog(){
  tail -f $@ | gsed -f "${SET}sedfiles/colorize_log.sed"
}

function gsync(){
  git pull
  git smupdate
}

# function gpl(){
#   branch=`g current-branch`
#   remote=`g remote`
#   g pl "${remote}" "${branch}"
# }

function gdfb(){
  branch=`g current-branch`
  g df $1 "${branch}" $2
}

function gprb(){
  branch=`g current-branch`
  remote=`g remote`
  g pl --rebase "${remote}" "${branch}"
}

function gbm(){
  branch=`g current-branch`
  gb -m "${branch}" $@
}

function gmg-remote-master(){
	gft
	gmg remotes/origin/master
}

function gmg-master(){
	gft
  my_branch=`g current-branch`
	echo "target branch is ${my_branch}."
  gco master

	if test $? -ne 0
	then
	  echo "gco master fail."
		return 1
	fi
	gpl
	if test $? -ne 0
	then
		echo "git pull master fail."
		return 1
	fi

  echo "checkout ${my_branch}"
	gco "${my_branch}"
  if test $? -ne 0
  then
    echo "git checkout ${my_branch} fail."
    return 1
  fi

  gmg master
  echo "gmg-master done."
}

function gcob-from-master(){
	gft

	gco master
	if test $? -ne 0
	then
		echo 'gco master fail.'
			return 1
	fi
	git pull origin master
	if test $? -ne 0
	then
		echo 'git pull origin master fail.'
		return 1
	fi

	gpl
	if test $? -ne 0
	then
		echo 'git pull fail.'
		return 1
	fi

	gcob $1
}

function gd-file(){
	if test $# -eq 0
	then
		echo "no argument found."
		return 1
	fi
  my_branch=`g current-branch`
	if test $# -eq 1
	then
		gd master $my_branch $1
		return 0
	fi
  gd $1 $my_branch $2
}

#shortcut for Application
alias e='./a.out'
# alias cot='open -a CotEditor'
# alias aq='aquamacs'
alias ccp='noglob ccp'

alias zmv='noglob zmv -W'
alias zcp='zmv -C'

alias vimdiff='nvim -d'
alias vd='vimdiff'

#rlwrap
# alias ocaml='rlwrap ocaml'


# util
alias sz='du -ch -d 1'

# tmux
alias tm='tmux'
alias tma='tm a -t'
alias tmn='tm new'
alias tmc='tm new -s'
alias tmr='tm rename-session -t'
alias tmk='tm kill-session -t'
alias tmks='tm kill-server'
alias tmss='tm start-server'

#tig
alias t='tig'
alias ta='tig --all'

alias -g V='| view -'

# alias benchmark-vim-awake='vs --startuptime vim_benchmark.txt'
# alias benchmark-vim-plugin='vim --cmd "profile start vim_benchmark.txt" --cmd "profile file */plugin/*.vim" --cmd "profile file .vimrc" -c quit'
# alias benchmark-vimrc='vim --cmd "profile start vim_benchmark.txt" --cmd "profile file .vimrc" -c quit'

alias php-syntax-check='find . -name "*.php" -exec php -l {} \; | grep -v "No syntax errors detected in"'
alias php-syntax-check-full='find . -name "*.php" -exec php -l {} \;'

alias g++11='g++ -std=c++11'

# 現在のディレクトリ以下の当てはまるファイルを全て削除する
# http://www.omnioo.com/omnioolab/2012/07/find.php
alias rrm='noglob _rrm'
function _rrm(){
  opt=""
  rmopt=""
  while getopts "i" flag; do
    case $flag in
      \?) arg+=$flag; break;;
      i) opt+="i";rmopt+="i";;
    esac
  done
  shift $(( $OPTIND - 1 ))

  find -L . "-${opt}name" "*${@}*"
  echo "remove all above? [y/N]"
  read ANSWER
  case $ANSWER in
      "Y" | "y" | "yes" | "Yes" | "YES" )
          find -L . "-${opt}name" "*${@}*" -exec rm "-r${rmopt}" {} \;;
          echo "$@ removed recursively.";;
      * ) echo "rrm canceled.";;
  esac
}

alias rfind='noglob _rfind'
# 現在のディレクトリ以下から引数の文字列を含むファイル名を列挙
function _rfind(){
  opt=""
  while getopts "i" flag; do
    case $flag in
      \?) arg+=$flag; break;;
      i) opt+="i";;
    esac
  done
  shift $(( $OPTIND - 1 ))
  find -L . "-${opt}name" "*${@}*"
}

# 現在のディレクトリ以下から引数の文字列を列挙
alias rgrep='noglob _rgrep'
function _rgrep(){
  opt=""
  while getopts "Eciwx" flag; do
    case $flag in
      \?) arg+=$flag; break;;
      E) opt+="E";;
      c) opt+="c";;
      i) opt+="i";;
      w) opt+="w";;
      x) opt+="x";;
    esac
  done
  shift $(( $OPTIND - 1 ))
  grep "-nr${opt}" "${@}" *
}


# Haskellのファイルをa.outでコンパイルする
# その際、オブジェクトファイル(.o)とインターフェースファイル(.hi)を削除
function ghca(){
    ghc $1 -o a.out
        ret=$?
        if test ${ret} -eq 0
            then
                fname=`echo $1 | sed -e "s/\.[^.]*$//"`
                rm ${fname}.hi
                rm ${fname}.o
                fi
}

# http://blog.repl.info/2011/12/03/ssh-with-tmux-and-zsh/
# tmuxの中でmanを実行した場合，新しくペインを作成する
function sp-man() {
  eval server=\${$#}
  tmux split-window "exec man $@"
}

function sp-gs() {
  eval server=\${$#}
  tmux split-window "exec git s | less"
}

function sp-gmd() {
  eval server=\${$#}
  tmux split-window "exec git modified"
}

function sp-ag() {
  eval server=\${$#}
  tmux split-window "exec ag -S --stats -m 100000 --color $@ | less"
}

function sp-find() {
  eval server=\${$#}
  tmux split-window "exec find $@ | less"
}

function sp-tig() {
  eval server=\${$#}
  tmux split-window "exec tig"
}

# ファイル名で絞って検索
function agG() {
	if test $# -lt 2; then
		echo "need at least 2 argument."
		return 1
  fi
	ag $1 -G $2
}

# http://stackoverflow.com/questions/5349718/how-can-i-repeat-a-character-in-bash
function up() {
	if test $# -lt 1; then
	    echo $#
	  cd ../
		return 0
  fi
  tmp=''
  repeat $1 tmp+='../'
  cd "$tmp"

}

# function dirdiff(){
  # vim -c DirDiff $1 $2
# }

# http://shigemk2.hatenablog.com/entry/20130629/1372463353
# 現在の作業ブランチにマージしていないブランチを削除
alias g-delete-remote-merged-branches="g-remote-merged-branches | xargs -I% git push origin :%"
alias g-remote-merged-branches="git branch -a --merged | 'grep' -v '*' | 'grep' -v master | 'grep' remotes/origin/ | sed -e 's% *remotes/origin/%%'"
alias g-remote-merged-branches_orig="git branch -a --merged | 'grep' -v '*' | 'grep' -v master | 'grep' remotes/origin/"

alias g-delete-remote-merged-branches-dry-run="g-remote-merged-branches | xargs -I% git push -n origin :% 2>&1 | tee -a ~/Desktop/delete_branches_dry_run.log"
alias g-delete-remote-merged-branches="g-remote-merged-branches | xargs -I% git push origin :% 2>&1 | tee -a ~/Desktop/delete_branches.log"

alias g-delete-remote-branches-hash-check="g-remote-merged-branches_orig | xargs -I{} sh -c 'echo {};git rev-parse {};echo ""' 2>&1 | tee -a ~/Desktop/delete_branches_hash_check.txt"

alias g-merged-branches="git merged-branches | grep -vE '^\*|master$|develop$'"
alias g-delete-merged-branches="g-merged-branches | xargs -I% git branch -d %"

# 単語を使ってブランチを削除
function g-remote-branches-by-word(){
  git branch -a | grep -v '*' | grep -v master | grep $1 | grep remotes/origin/
}

function g-remote-branches-by-word-fmt(){
  g-remote-branches-by-word $1 | sed -e 's% *remotes/origin/%%'
}

function g-delete-remote-branches-by-word-hash-check() {
  g-remote-branches-by-word $1 | xargs -I{} sh -c 'echo {};git rev-parse {};echo ""' 2>&1 | tee -a ~/Desktop/delete_branches_hash_check.txt
}

function g-delete-remote-branches-by-word-dry-run() {
  g-remote-branches-by-word-fmt $1 | xargs -I% git push -n origin :% 2>&1 | tee -a ~/Desktop/delete_branches_dry_run.log
}

function g-delete-remote-branches-by-word() {
  g-remote-branches-by-word-fmt $1 | xargs -I% git push origin :% 2>&1 | tee -a ~/Desktop/delete_branches.log
}

function fullpath(){
  echo "${PWD}/${1}"
}

# IntelliJでファイルを開く
function ij(){
    /Applications/IntelliJ\ IDEA.app/Contents/MacOS/idea `fullpath $1`
}
