# main viewの左端にコミットIDを表示する
set main-view = id date author commit-title:graph=yes,refs=yes

# Whether to show staged and unstaged changes in the main view.
set show-changes = true

# 水平分割したウィンドウの下画面サイズを % で指定（行数指定も可）
set split-view-height = 70%
set vertical-split = false

# 差分の前後の表示行数（diff-context)を指定
set diff-context = 2

set line-graphics = utf-8

# merge diff表示
# http://qiita.com/YasuOza/items/7be136f03867d20b8332
set diff-options = -m --first-parent

# set line-number = yes
set ignore-case = yes
set wrap-lines = yes

# https://github.com/jonas/tig/issues/595
set status-show-untracked-files = yes

# set diff-highlight = yes

# カラー設定
# diff-view で境界が見やすくなるように変更
color  diff-header       default magenta
color  diff-chunk        black   white

set wrap-lines = true

# blame view の行数表示をON、intervalを1に
set blame-view  = date:default author:email-user id:yes,color line-number:yes,interval=1 text

# Pager系の行数表示をON、intervalを1に (default: line-number:no,interval=5)
set pager-view  = line-number:yes,interval=1 text
set stage-view  = line-number:yes,interval=1 text
set log-view    = line-number:yes,interval=1 text
set blob-view   = line-number:yes,interval=1 text
set diff-view   = line-number:yes,interval=1 text:yes,commit-title-overflow=no

# . で HEAD との diff
bind main    .      !sh -c "git diff %(commit) | tig"
bind diff    .      !sh -c "git diff %(commit) | tig"
bind refs    .      !sh -c "git diff %(branch) | tig"

# Alt-. で指定 commit ID との diff
bind main    <Esc>. ?sh -c "git diff %(commit)..%(prompt Enter commit ID: ) | tig"
bind diff    <Esc>. ?sh -c "git diff %(commit)..%(prompt Enter commit ID: ) | tig"
bind refs    <Esc>. ?sh -c "git diff %(branch)..%(prompt Enter branch name: ) | tig"

########
# generic
########
# デフォルトの bind generic G !git gc を無効化する
bind generic G none
bind generic g move-first-line
bind generic G move-last-line
bind generic B !git current-branch
# Y で、コミットハッシュ値をコピーできるようにする
bind generic Y !@bash -c "cut -c-7 <<<%(commit) | xargs echo -n | pbcopy"

########
# main view
########
# チーム開発しているとよくremoteで更新が入るため手元に同期
bind main <Ctrl-r> !?git pull --rebase
# revert作業は手早く行う必要があるためバインドして効率化
bind main V !?git revert %(commit)
# 任意のリビジョンを再現するためにcheckoutすることが多いためバインド
bind main C !?git checkout %(commit)
bind main M !?git merge %(commit)

########
# refs view
########
# カーソル行のブランチを親にして入力した名前のブランチを作成
bind branch c !git checkout -b %(prompt) %(ref)
# 不要になったブランチを削除（squash mergeや別リポジトリへのmergeをするワークフロー用）
bind branch D !?git branch -D %(ref)
# 不要になったブランチを削除
# bind branch d !?git branch -d %(ref)
bind branch d !?git diff %(branch)
# originへのpush
# bind branch P !?git push -u origin %(ref)
bind branch P !?git pull origin %(ref)
bind branch M !?git merge %(ref)
bind branch S !?git merge --squash %(ref)
bind branch l !git log %(ref)
bind branch C !?git checkout %(ref)

########
# status view
########
# pushできるようにする
# https://github.com/jonas/tig/issues/199
bind status P !?git push origin
