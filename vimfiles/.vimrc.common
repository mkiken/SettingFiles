
" カラーリング
syntax on
set hlsearch " 検索結果文字列のハイライトを有効にする

set encoding=utf-8
scriptencoding utf-8

" ミュートにする。
set t_vb=
set visualbell
set noerrorbells

set cursorline " カーソル行をハイライト
"set cursorcolumn

set title "編集中のファイル名を表示する
set showcmd "入力中のコマンドを表示する
set laststatus=2 "ステータスラインを常に表示する

"スワップファイルを生成しない
" set noswapfile
"バックアップファイルを生成しない
" set nobackup

" http://stackoverflow.com/questions/15660669/what-is-a-un-file-or-or-why-does-vim-in-the-terminal-make-the-un-file
if has('persistent_undo')
  set undofile
  set undodir=~/.backup/vim/undo
endif

" http://nanasi.jp/articles/howto/file/seemingly-unneeded-file.html
set swapfile
set directory=~/.backup/vim/swap

set backup
set backupdir=~/.backup/vim/backup

" 行番号の表示
set number
" カーソルが何行目の何列目に置かれているかを表示する
" set ruler

" http://d.hatena.ne.jp/ruicc/20090615/1245086039
if &compatible
  set nocompatible
endif

" http://vim-users.jp/2010/04/hack137/
" オートインデントを有効にする（新しい行のインデントを現在の行と同じにする）
set autoindent
" set copyindent
" set preserveindent
"C言語スタイルのインデント機能が有効
set cindent
" タブに展開
set expandtab
" タブが対応する空白の数
set tabstop=2
" タブやバックスペースの使用等の編集操作をするときに、タブが対応する空白の数
set softtabstop=2
" インデントの各段階に使われる空白の数
set shiftwidth=2
" 新しい行を作ったときに高度な自動インデントを行う
" set smartindent
"行頭の余白内で Tab を打ち込むと、'shiftwidth' の数だけインデントする
set smarttab

" 自動改行しない
" http://kaworu.jpn.org/kaworu/2007-07-29-1.php
set textwidth=0

" 閉じ括弧が入力されたとき、対応する括弧を表示する
set showmatch

" % で移動する括弧の構成に <> を追加する
set matchpairs+=<:>

" カーソルを行頭、行末で止まらないようにする
set whichwrap=b,s,h,l,<,>,[,]

" コマンドライン補完を拡張モードにする
set wildmenu

" コマンドモードでの補完設定
" set wildmode=longest:full,list
set wildmode=list:full,longest:full

" 検索の時に大文字小文字を区別しない
set ignorecase
" 最後まで検索したら先頭に戻る
set wrapscan
" インクリメンタルサーチ(検索文字を打ち込むと即検索)
set incsearch
set smartcase " 検索文字列に大文字が含まれている場合は区別して検索する
set gdefault "置換の時 g オプションをデフォルトで有効にする

set autoread " ファイル内容が変更されると自動読み込みする

set copyindent
set preserveindent

" タブラインを常に表示
set showtabline=2

" http://shoken.hatenablog.com/entry/20120617/p
set splitbelow "新しいウィンドウを下に開く
" set splitright "新しいウィンドウを右に開く

" set paste
" http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
nnoremap <F6> :set invpaste paste?<CR>
imap <F6> <C-O>:set invpaste paste?<CR>
set pastetoggle=<F6>
set showmode

" folding
" http://www.ksknet.net/vi/post_183.html
" set foldmethod=syntax
" set foldmethod=indent
set foldmethod=manual
set foldlevel=100 "Don't autofold anything

" http://blog.remora.cx/2011/08/display-invisible-characters-on-vim.html
set list
set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%
"set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%

"_でも単語区切り
" https://sites.google.com/site/vimdocja/usr_05-html
set iskeyword-=_

" http://qiita.com/takeh1k0/items/b66b8a66bb4073084ee5
set ambiwidth=double

" http://superuser.com/questions/22444/make-vim-display-a-line-at-the-edge-of-the-set-textwidth
set colorcolumn=80
" highlight ColorColumn ctermbg=green guibg=orange
" highlight ColorColumn cterm=italic gui=none

" http://vim.wikia.com/wiki/Make_search_results_appear_in_the_middle_of_the_screen
" set scrolloff=999
set scrolloff=5

" 権限無いファイルでも保存
cabbrev w!! w !sudo tee % >/dev/null
cabbrev a Ag
cabbrev c CtrlSF
cabbrev t TagbarCurrentTag
command! Tn tabnew
command! Tc tabclose
command! To tabonly
command! Cdc CdCurrent
" cabbrev cdc :lcd %:h
command! Ga :call Gadd()
command! Gb Gblame
command! Gc Gcommit
command! Gd Gdiff
command! Gr Gread
command! Gs Gstatus
command! Rev g/.*/mo0
command! Bo BufOnly

" http://rbtnn.hateblo.jp/entry/2014/11/30/174749
augroup vimrc
  autocmd!
augroup END

" http://tech-tec.com/archives/934
let g:mapleader=" "


" 全角スペース・行末のスペース・タブの可視化
if has("syntax")
    syntax on

    " PODバグ対策
    syn sync fromstart

    function! ActivateInvisibleIndicator()
        " 下の行の"　"は全角スペース
        syntax match InvisibleJISX0208Space "　" display containedin=ALL
        highlight InvisibleJISX0208Space term=underline ctermbg=Blue guibg=darkgray gui=underline
    endfunction

    augroup invisible
        autocmd! invisible
        autocmd BufNew,BufRead * call ActivateInvisibleIndicator()
    augroup END
endif

" http://qiita.com/katton/items/bc9720826120f5f61fc1
function! s:remove_dust()
    let cursor = getpos(".")
    " 保存時に行末の空白を除去する
    %s/\s\+$//ge
	" 保存時に行末のタブ文字を除去する
    %s/\t\+$//ge

    " 保存時にtabを2スペースに変換する
    "%s/\t/  /ge
    call setpos(".", cursor)
    unlet cursor
endfunction

" http://stackoverflow.com/questions/6496778/vim-run-autocmd-on-all-filetypes-except
let remove_dust_blacklist = ['php', 'smarty']
autocmd vimrc BufWritePre * if index(remove_dust_blacklist, &ft) < 0 | call <SID>remove_dust()
" autocmd BufWritePre * call <SID>remove_dust()


" http://vim-users.jp/2009/09/hack69/
" set autochdir

vnoremap <Leader>{ "zdi{<C-R>z}<ESC>
vnoremap [ "zdi[<C-R>z]<ESC>
vnoremap ( "zdi(<C-R>z)<ESC>
vnoremap <Leader>} "zdi{<C-R>z}<ESC>
vnoremap ] "zdi[<C-R>z]<ESC>
vnoremap ) "zdi(<C-R>z)<ESC>
vnoremap " "zdi"<C-R>z"<ESC>
vnoremap ' "zdi'<C-R>z'<ESC>
vnoremap ` "zdi`<C-R>z`<ESC>
" vnoremap < S> " インデントと衝突><

" http://d.hatena.ne.jp/thata/20100606/1275796513
"カーソルを表示行で移動する。物理行移動は<C-n>,<C-p>
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
nnoremap <Down> gj
nnoremap <Up>   gk

" Alt-f, Alt-bを無理矢理マッピング
" http://stackoverflow.com/questions/7501092/can-i-map-alt-key-in-vim
noremap! ƒ <S-Right>
" M-b
noremap! ∫ <S-Left>
" M-j
noremap! Ô <C-o>O
" M-d
noremap! ∂ <C-o>dw

" http://vim-users.jp/2009/08/hack57/
nnoremap <Enter> :<C-u>call append(expand('.'), '')<Cr>j
nnoremap <C-Tab> gt
nnoremap <C-S-Tab> gT
nnoremap gr gT
" nnoremap <C-S-Tab> gT

" Gはファイルの終端に移動
nnoremap G G<End>
vnoremap G G<End>
onoremap G G<End>

" ちょっと微妙かもだけど、-で行末に移動
" nnoremap - <End>
" vnoremap - <End>
" onoremap - <End>

" ヴィジュアルモードでdeleteで削除
" MacのdeleteはBackSpaceらしい
" vnoremap <DEL> d
vnoremap <BS> d

" 1つ前の検索ワードを表示
" nnoremap // /<C-P>
" {}括弧をfoldする
nnoremap z/ zf%

nnoremap <C-M-Left> <C-w><Left>
nnoremap <C-M-Up> <C-w><Up>
nnoremap <C-M-Down> <C-w><Down>
nnoremap <C-M-Right> <C-w><Right>

" 挿入モードでもタブ移動したい！
nnoremap <C-Left> gT
nnoremap <C-Right> gt

" Ctrlでjkhlをパワーアップ
nnoremap <C-j> 5j
nnoremap <C-k> 5k
nnoremap <C-h> 5h
nnoremap <C-l> 5l

" http://stackoverflow.com/questions/2005214/switching-to-a-particular-tab-in-vim
" Jump to particular tab directly

" 他のアプリケーションとのコピー&ペースト
" https://sites.google.com/site/hymd3a/vim/vim-copy-paste
" :set clipboard=unnamed
"*x  切り取り
vnoremap <Leader>x "+x
"*y  コピー
vnoremap <Leader>y "+y
"*p  ペースト
nnoremap <Leader>p "+p

" nnoremap P $p

" http://vim.wikia.com/wiki/Format_pasted_text_automatically
" :nnoremap p ]p
" :nnoremap ]p p


" http://cohama.hateblo.jp/entry/2013/10/07/020453
nnoremap <F4> :<C-u>setlocal relativenumber!<CR>
inoremap <F4> <C-O>:setlocal relativenumber!<CR>

" nnoremap <M-j> j
inoremap <C-Left> <Esc>gT
inoremap <C-Right> <Esc>gt

" ESCを2回入力で検索時のハイライトを解除
" nnoremap <Esc><Esc> :nohlsearch<CR>

" インサートモードで改行
" http://cohalz.com/2013/06/14/vim-easier-enter-keymap/
inoremap <C-j> <ESC>$a<CR>

" visulaモードで選択してからのインデント調整で調整後に選択範囲を開放しない
vnoremap > >gv
vnoremap < <gv

" http://notachi.hatenadiary.jp/entry/2012/11/13/181810
" カーソル移動
noremap! <C-p> <Up>
noremap! <C-n> <Down>
noremap! <C-b> <Left>
noremap! <C-f> <Right>
noremap! <C-e> <End>
noremap! <C-a> <Home>
noremap! <C-d> <Del>

" http://linuxserver.jp/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2/%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF/vim/%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A7%E3%81%AE%E3%83%9A%E3%83%BC%E3%82%B9%E3%83%88.php
noremap! <C-v> <C-r>"


" inoremap <M-Left> <Left>
" inoremap <M-b> <M-left>
" カーソルのある行を画面中央に
inoremap <C-l> <C-o>zz
" カーソルより前の文字を削除
" inoremap <C-u> <C-o>d0
" カーソルより後の文字を削除
inoremap <C-k> <c-o>D
" inoremap <C-.> <c-o>dd
" アンドゥ
" inoremap <C-x>u <C-o>u
inoremap <C-u> <C-o>u
inoremap <C-]> <C-o>u
inoremap <C-r> <C-o><C-r>
" 貼りつけ
" noremap! <C-y> <C-o>P
" noremap! ∆ <C-o>O

" vimrcをリロード
" http://whileimautomaton.net/2008/07/20150335
" nnoremap <Space>s  :<C-u>source $VIMRC<Return>
nnoremap <Leader>s  :<C-u>source ~/.vimrc <Return> :<C-u>source ~/.gvimrc <Return>
command! ReloadVimrc  :source ~/.vimrc

" http://tech.toshiya240.com/articles/2014/06/matchit-vim/
:source $VIMRUNTIME/macros/matchit.vim
augroup matchit
  au!
  au FileType ruby let b:match_words = '\<\(module\|class\|def\|begin\|do\|if\|unless\|case\)\>:\<\(elsif\|when\|rescue\)\>:\<\(else\|ensure\)\>:\<end\>'
augroup END

" for grep
" http://qiita.com/yuku_t/items/0c1aff03949cb1b8fe6b
autocmd QuickFixCmdPost *grep* cwindow
set grepprg=grep\ -nH


" http://qiita.com/Linda_pp/items/ee4bf64b1fe2c0a32cbd
" 行頭 → 非空白行頭 → 行末 をローテートする
function! s:rotate_in_line()
    let c = col('.')

    let cmd = c == 1 ? '^' : '$'
    execute "normal! ".cmd

    if c == col('.')
        if cmd == '^'
            normal! $
        else
            normal! 0
        endif
    endif
endfunction
" - に割り当て
nnoremap <silent>- :<C-u>call <SID>rotate_in_line()<CR>
vnoremap <silent>- :<C-u>call <SID>rotate_in_line()<CR>
onoremap <silent>- :<C-u>call <SID>rotate_in_line()<CR>

" undoを区切る
" http://haya14busa.com/vim-break-undo-sequence-in-insertmode/
inoremap <Space> <Space><C-g>u
" inoremap <CR> <CR><C-g>u

" </で閉じタグを自動補完
" http://qiita.com/hail2u/items/26c473677b2ce5672876
" smartyのomnifuncをhtmlと同じにする
autocmd FileType smarty setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType html,smarty inoremap <silent> <buffer> </ </<C-x><C-o>

" smartinputによって顔文字が入力できないことがあるので、回避策
nnoremap <F5> :<C-u>setlocal imdisable!<CR>
inoremap <F5> <C-O>:setlocal imdisable!<CR>


" インデントレベルが同じ行を探して移動する
" http://qiita.com/crispy/items/ff3522a327d0a7d7706b
func! s:IndentSensitive(backward)
  let lineNum = line('.')
  let line = getline(lineNum)
  let col = col('.')
  call cursor(lineNum, 1)
  let indentLevel = s:getIndentLevel(line)
  let nextLine = getline(lineNum + (a:backward ? -1 : 1))
  let nextIndentLevel = s:getIndentLevel(nextLine)
  let pattern = printf('^[ \t]\{%d}[^ \t]', indentLevel)
  if indentLevel != nextIndentLevel
    let hitLineNum = search(pattern, 'n' . (a:backward ? 'b' : ''))
  else
    let lastLineNum = line('$')
    let hitLineNum = lineNum
    while 1 <= lineNum && lineNum <= lastLineNum
      let lineNum += a:backward ? -1 : 1
      if lineNum < 1
        break
      endif
      if s:getIndentLevel(getline(lineNum)) != indentLevel
        break
      end
      let hitLineNum = lineNum
    endwhile
  endif
  call cursor(hitLineNum, col)
endfunc
func! s:getIndentLevel(str)
  return len(matchstr(a:str, '^[ \t]*'))
endfunc
func! IndentSensitivePrev()
  call s:IndentSensitive(1)
endfunc
func! IndentSensitiveNext()
  call s:IndentSensitive(0)
endfunc
nnoremap <silent> <Leader>k :call IndentSensitivePrev()<CR>
nnoremap <silent> <Leader>j :call IndentSensitiveNext()<CR>
vnoremap <silent> <Leader>k :call IndentSensitivePrev()<CR>
vnoremap <silent> <Leader>j :call IndentSensitiveNext()<CR>


" 各タブページのカレントバッファ名+αを表示
function! s:tabpage_label(n)
  " t:title と言う変数があったらそれを使う
  let title = gettabvar(a:n, 'title')
  if title !=# ''
    return title
  endif

  " タブページ内のバッファのリスト
  let bufnrs = tabpagebuflist(a:n)

  " カレントタブページかどうかでハイライトを切り替える
  let hi = a:n is tabpagenr() ? '%#TabLineSel#' : '%#TabLine#'

  " バッファが複数あったらバッファ数を表示
  let no = len(bufnrs)
  if no is 1
    let no = ''
  endif
  " タブページ内に変更ありのバッファがあったら '+' を付ける
  let mod = len(filter(copy(bufnrs), 'getbufvar(v:val, "&modified")')) ? '+' : ''
  let sp = (no . mod) ==# '' ? '' : ' '  " 隙間空ける

  " カレントバッファ
  let curbufnr = bufnrs[tabpagewinnr(a:n) - 1]  " tabpagewinnr() は 1 origin
  let fname = pathshorten(bufname(curbufnr))

  let label = no . mod . sp . fname

  return '%' . a:n . 'T' . hi . label . '%T%#TabLineFill#'
endfunction

" http://d.hatena.ne.jp/thinca/20111204/1322932585
function! MakeTabLine()
  let titles = map(range(1, tabpagenr('$')), 's:tabpage_label(v:val)')
  let sep = ' | '  " タブ間の区切り
  let tabpages = join(titles, sep) . sep . '%#TabLineFill#%T'
  let info = ''  " 好きな情報を入れる
  let info .= fnamemodify(getcwd(), ":~") . ' '
  " current function info (cfi.vim)
  " let info .= cfi#format('%s()' . sep, '')
  return tabpages . '%=' . info  " タブリストを左に、情報を右に表示
endfunction

set tabline=%!MakeTabLine()

function! AlignBenchmark() abort
  let s:list = []
  global/^SCRIPT/
        \ call add(s:list, printf("%s\t%s",
        \                         matchstr(getline(line('.')+2), '\d\+\.\d\+'),
        \                         matchstr(getline('.'), 'SCRIPT\s*\zs.*$')))
  new
  put =reverse(sort(s:list))
  1 delete _
endfunction


" http://hail2u.net/blog/software/vim-auto-close-quickfix-window.html
augroup QfAutoCommands
  autocmd!

  " Auto-close quickfix window
  autocmd WinEnter * if (winnr('$') == 1) && (getbufvar(winbufnr(0), '&buftype')) == 'quickfix' | quit | endif
augroup END

" 画面再描画
nnoremap <Leader>r <C-l>
