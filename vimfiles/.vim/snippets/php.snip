snippet log
  logger()->info(${1});

snippet logw
  logger()->warn(${1});

snippet logn
  logger()->notice(${1});

snippet loge
  logger()->error(${1});

snippet logd
  logger()->debug(${1});

snippet plog
  logger()->info(print_r(${1}, TRUE));

snippet vlog
  logger()->info(var_export(${1}, TRUE));

snippet th
  $this->${1}

snippet td2
  $this->${1}->${2}

snippet thd
  $this->${1}->${2}

snippet thm
  $this->${1}_model->${2};

snippet thc
  $this->${1}_config->${2};

snippet thr
  $this->redis->${1};

snippet tha
  $this->assert${1}(${2});

snippet thae
  $this->assertEquals(${1}, ${2}, ${3});

snippet thci
  $this->CI->${1};

snippet thmem
  $this->memcache->${1};

snippet thmemm
  $this->memcachemanage->${1};

snippet loadm
  $this->load->model('model/${1}_model');

snippet loadd
  $this->load->model('dao/${1}');

snippet loadf
  $this->load->model('facade/facade_${1}');

snippet loadl
  $this->load->library('${1}');

snippet ci
  $this->CI->${1};

snippet ar
  '${1}' => ${2},

snippet as
  $${1} = ${2};

snippet vd
  var_dump(${1});

snippet ve
  var_export(${1}, TRUE)

snippet pf
  printf("${1}");

snippet pr
  print_r(${1}, TRUE)

snippet ae
  throw new ApplicationException('${1}');

snippet re
  throw new RedirectException('${1}', '${2}');

snippet vdf
  {${1}|@var_dump}

snippet doc
	/**
	 * ${1}
	 *
	 * @param ${2}
	 * @return ${3}
	 */

snippet try
  try
  {
  	${1}
  }
  catch (${2})
  {
  	${3}
  }
